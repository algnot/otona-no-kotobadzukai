generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("database_url")
}

model TokenMapper {
    id    Int     @id @default(autoincrement())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt  
    exp   String
    user  User  @relation(fields: [uid], references: [uid])
    uid   String
    isActive Boolean @default(true)
}

model PaymentDetail {
  id    Int     @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt  
  name  String
  number String
  isPromptpay Boolean @default(false)
  user  User  @relation(fields: [uid], references: [uid])
  ref   String
  uid   String
}

model User {
  id    Int     @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt      
  uid   String  @unique
  email String  @unique
  salt String?
  password String?
  name  String
  googleAuthId  String? 
  tokens  TokenMapper[]
  paymentDetail  PaymentDetail[]
  ownerBill Bill[]
  userBill  UserBill[]
}

model BillItem {
  id    Int   @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt    
  bill        Bill @relation(fields: [billId], references: [id])
  billId      Int
  amount      Float
  name        String
  taxPercent  Float  @default(0)
  totalTax    Float  @default(0)
  serviceChargePercent  Float  @default(0)
  totalServiceCharge    Float  @default(0)
  totalAmount  Float @default(0)
}

model BillPayment {
  id    Int   @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt  
  name        String
  number      String
  isPromptpay Boolean @default(false)
  bill        Bill @relation(fields: [billId], references: [id])
  billId      Int
}

model UserBill {
  id    Int   @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt  
  user  User? @relation(fields: [uid], references: [uid])
  uid   String? 
  name  String?
  email String?
  bill  Bill  @relation(fields: [billId], references: [id])
  billId  Int
}

model Bill {
  id    Int   @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt    
  owner       User @relation(fields: [ownerUid], references: [uid])
  ownerUid    String   
  name        String
  state       String @default("open")
  total       Float  @default(0)
  totalTax    Float  @default(0)
  totalServiceCharge Float  @default(0)
  totalAmount Float @default(0)
  ref         String?
  userBill    UserBill[]
  billItem    BillItem[]
  payment     BillPayment[]
}
